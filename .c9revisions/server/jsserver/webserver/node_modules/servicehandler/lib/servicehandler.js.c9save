{"ts":1360119450159,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1360119633371,"patch":[[{"diffs":[[1,"/**\n * Startard service handler\n * Address -- http(s)://[host]/[service name]/[ver]/[api].[fmt](?cb=...&...)\n */\nvar url = re"]],"start1":0,"start2":0,"length1":0,"length2":125}]],"length":125,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360119733649,"patch":[[{"diffs":[[0,"url = re"],[1,"quire(\"url\"),\n"]],"start1":117,"start2":117,"length1":8,"length2":22}]],"length":139,"saved":false}
{"ts":1360119739315,"patch":[[{"diffs":[[0,"\"url\"),\n"],[1,"    http = require(\"http\"),\n    "]],"start1":131,"start2":131,"length1":8,"length2":40}]],"length":171,"saved":false}
{"ts":1360119767746,"patch":[[{"diffs":[[0,"re(\"http\"),\n    "],[1,"formidable = require(\"formidable\")"]],"start1":155,"start2":155,"length1":16,"length2":50}]],"length":205,"saved":false}
{"ts":1360122457859,"patch":[[{"diffs":[[0,"idable\")"],[1,",\n    util = require(\"./util\"),\n    "]],"start1":197,"start2":197,"length1":8,"length2":44}]],"length":241,"saved":false}
{"ts":1360122475855,"patch":[[{"diffs":[[0,"(\"./util\"),\n    "],[1,"serviceCache = {};\n    \n    "]],"start1":225,"start2":225,"length1":16,"length2":44}]],"length":269,"saved":false}
{"ts":1360122495731,"patch":[[{"diffs":[[0,"};\n    \n"],[-1,"    "],[1,"// common\n// pass it to ctx"]],"start1":257,"start2":257,"length1":12,"length2":35}]],"length":292,"saved":false}
{"ts":1360122516965,"patch":[[{"diffs":[[0,"t to ctx"],[1,"\nvar common = require(\"common\");"]],"start1":284,"start2":284,"length1":8,"length2":40}]],"length":324,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360123693793,"patch":[[{"diffs":[[0,"ommon\");"],[1,"\n\n//\n// handle http request\n//\nexports.onHandle = function (ctx) {\n    var regex = /\\/([a-z0-9]+)\\/([a-z0-9\\.]+)\\/([a-z0-9]+)\\.([a-z0-9]+)/i;\n    var infos = regex.exec(ctx.request.url);\n    if (!infos || infos.length < 5) {\n        module.onError(ctx, 404, 'Service Not Found');\n    } else {\n        module.processHandle(ctx, infos[1], infos[2], infos[3], infos[4]);\n    }\n};\n\n//\n// \n//\nexports.serve = function (ctx, serviceFn, format, versionNumber) {\n    //simply extend it\n    //ctx as a namespace\n    var serveCtx = common.jqueryUtils.extend(ctx, {\n        // parsing url\n        getParsedUrl:function () {\n            if (!serveCtx.parsedUrl) {\n                parsedUrl = url.parse(ctx.request.url, true);\n                serveCtx.parsedUrl = parsedUrl || {};\n            }\n\n            return serveCtx.parsedUrl;\n        },\n        //\n        //     Get querystring\n        //\n        getQueryString:function (name) {\n            if (!serveCtx.requestQs) {\n                requestQs = serveCtx.getParsedUrl().query;\n                serveCtx.requestQs = requestQs || {};\n            }\n            return serveCtx.requestQs[name];\n        },\n\n        getQuery:function () {\n            if (!serveCtx.requestQs) {\n                requestQs = serveCtx.getParsedUrl().query;\n                serveCtx.requestQs = requestQs || {};\n            }\n\n            return serveCtx.requestQs;\n        },\n\n        //\n        // \tThis function will be called by serve implementation to provider serve\n        //\tctx parameters. Such as: querystrings & post form\n        //\n        getRequestArgs:function (cb) {\n            if (serveCtx.requestArgs) {\n                return cb(0, serveCtx.requestArgs, serveCtx.Files);\n            }\n\n            if (!serveCtx.requestQs) {\n                requestQs = serveCtx.getParsedUrl().query;\n                serveCtx.requestQs = requestQs || {};\n            }\n\n            if (serveCtx.request.method === 'POST') {\n\n                // Get post parameters. Only support form urlencode format here for now.\n\n                // Set default submit mode.\n                if (!serveCtx.request.headers['content-type']) {\n                    serveCtx.request.headers['content-type'] = 'application/x-www-form-urlencoded';\n                }\n\n                var form = new formidable.IncomingForm();\n                form.parse(serveCtx.request, function (err, fields, files) {\n                    if (err) {\n                        cb(err, 'Failed To Read Request Form');\n                    }\n\n                    for (var key in serveCtx.requestQs) {\n                        fields[key] = fields[key] || serveCtx.requestQs[key];\n                    }\n                    cb(0, serveCtx.requestArgs = fields, serveCtx.requestFiles = files);\n                });\n            } else {\n                cb(0, serveCtx.requestArgs = serveCtx.requestQs);\n            }\n        },\n\n        //\n        //\tThis function will be called by serve implement when finished(must).\n        //\n        responseData:function (err, data) {\n            var retData = {\n                err:err || 0,\n                data:data\n            };\n            switch (format || 'json') {\n                case 'json':\n                    module.responseJsonData(serveCtx, retData);\n                    break;\n\n                case 'xml':\n                    module.responseXmlData(serveCtx, retData);\n                    break;\n                    \n                case 'html':\n                \tmodule.responseHtmlData(serveCtx, retData);\n                \tbreak;\n            }\n        },\n\n        //common\n        common:common,\n\n        //authorizing\n        //callee side\n        authorize:function () {\n            var ticket = serveCtx.getQueryString('_t');\n\n            if (common.cryption.authTicket(ticket, serveCtx.service)) {\n                return true;\n            }\n\n            serveCtx.response.writeHead(401, 'Unauthorized Request');\n            serveCtx.response.end();\n\n            return false;\n        },\n        //caller side\n        authorizedGet:function (_url, cb) {\n            //encrypt\n            var rpass = common.cryption.getDefaultRpass('base64');\n\n            var urlObj = url.parse(_url, true);\n\n            //path name for service name\n            var regex = /\\/([a-z0-9]+)\\/([a-z0-9\\.]+)\\/([a-z0-9]+)\\.([a-z0-9]+)/i;\n            var infos = regex.exec(urlObj.pathname);\n            if (!infos || infos.length < 5) {\n                cb(new Error('No Such Service'), null);\n\n                return;\n            }\n            var serviceName = infos[1];\n\n            //query string\n            urlObj.query = urlObj.query || {};\n            urlObj.query._t = common.cryption.getRequestTicket(serviceName);\n\n            var req = http.request(url.format(urlObj), function (response) {\n                var str = ''\n                response.on('data',function (chunk) {\n                    str += chunk;\n                }).on('end',function () {\n                        if (response.statusCode != 200) {\n                            cb(new Error('Error Getting Response, HttpStatusCode:' + response.statusCode), null);\n                        }\n                        else {\n                            var resp = JSON.parse(str);\n                            cb(resp.err, resp.data);\n                        }\n                    }).on('error', function (e) {\n                        console.log(e);\n                        cb(e, null);\n                    });\n            });\n            req.write('');\n            req.end();\n        }\n    });\n\n    serviceFn(serveCtx);\n};\n\nmodule.processHandle = function (ctx, serviceName, versionNumber, apiName, format) {\n    var serviceFn = module.getService(serviceName, apiName);\n\n    if (serviceFn) {\n        //extend ctx\n        ctx.service = serviceName;\n        ctx.fn = apiName;\n        ctx.version = versionNumber;\n        ctx.format = format;\n\n        exports.serve(ctx, serviceFn, format, versionNumber);\n    } else {\n        module.onError(ctx, 404, 'Service Not Found');\n    }\n};\n\n//handle error request\nmodule.onError = function (ctx, code, msg) {\n    // Failed to handle the request.\n    ctx.response.writeHead(code, msg);\n    ctx.response.end();\n};\n\nmodule.responseJsonData = function (ctx, data) {\n    //stringify\n    var str = JSON.stringify(data);\n\n    var callback = ctx.getQueryString('cb');\n    var responseData = callback ? callback + '(' + str + ')' : str;\n    var body = new Buffer(responseData, 'UTF-8');\n    ctx.response.writeHead(200, {\n        'Content-Length':body.length,\n        'Content-Type':'text/html;charset=utf-8'\n    });\n    ctx.response.end(body);\n};\n\nmodule.responseXmlData = function (ctx, data) {\n    var responseData = util.xmlstringify({ result:data });\n    var body = new Buffer(responseData, 'UTF-8');\n    ctx.response.writeHead(200, {\n        'Content-Length':body.length,\n        'Content-Type':'text/xml;charset=utf-8'\n    });\n    ctx.response.end(body);\n};\n\nmodule.responseHtmlData = function (ctx, data) {\n    //stringify\n    var str = JSON.stringify(data);\n\n    var callback = ctx.getQueryString('cb');\n    var responseData = callback ? callback + '(' + str + ')' : str;\n    var responseData = '<script type=\"text/javascript\">document.domain=\"pptv.com\"; '+responseData+'</script>';\n    var body = new Buffer(responseData, 'UTF-8');\n    ctx.response.writeHead(200, {\n        'Content-Length':body.length,\n        'Content-Type':'text/html;charset=utf-8'\n    });\n    ctx.response.end(body);\n};\n\n\n// general interfaces here\nvar generalModuleExtentions = {\n}\n\nmodule.getService = function (serviceName, apiName) {\n\n    // Search the service function in cache first.\n    var key = (serviceName + '.' + apiName).toLowerCase();\n    if (serviceCache[key]) {\n        return serviceCache[key];\n    }\n\n    //\n    // Load service module if failed to find service function in cache.\n    //\t\tNote: The service function name could be case sensitive but the url is case\n    //\tinsensitive. So we must iterate service function and build the case insensitive cache.\n    //\n    var serviceModule = require(serviceName);\n\n    if (serviceModule) {\n        //something like $.extend();\n        common.jqueryUtils.extend(serviceModule, generalModuleExtentions);\n    }\n\n    for (var fname in serviceModule) {\n        var fn = serviceModule[fname];\n        if (toString.call(fn) === '[object Function]' && fn.length === 1) {\n            serviceCache[(serviceName + '.' + fname).toLowerCase()] = fn;\n        }\n    }\n\n    if (serviceCache[key]) {\n        return serviceCache[key];\n    }\n};\n\nexports.setSettings = function (stgs) {\n    settings = stgs;\n    return module.exports;\n};\n"]],"start1":316,"start2":316,"length1":8,"length2":8680}]],"length":8996,"saved":false}
{"contributors":[],"silentsave":false,"ts":1360132234559,"patch":[[{"diffs":[[0,"     // "],[-1,"\t"],[1," "],[0,"This fun"]],"start1":1737,"start2":1737,"length1":17,"length2":17}]],"length":8996,"saved":false}
